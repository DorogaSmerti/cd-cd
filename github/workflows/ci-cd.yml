name: CI/CD Pipeline

on:
  push:
    branches: [ "**" ] # запуск на будь-яку гілку
  pull_request:

permissions:
  contents: read
  deployments: write

env:
  PYTHON_VERSION: '3.12'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4

      - name: 2. Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 3. (CACHE) Get pip cache dir
        id: pip-cache
        run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT

      - name: 4. (CACHE) Restore pip cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: 5. Install dependencies
        run: pip install -r requirements.txt

      - name: 6. Run tests (and create report)
        run: pytest --junitxml=report.xml || true

      - name: 7. (ARTIFACT) Upload test report
        uses: actions/upload-artifact@v4
        if: always() # Завжди завантажувати звіт
        with:
          name: junit-report
          path: report.xml
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: 1. Checkout code
        uses: actions/checkout@v4
      
      - name: 2. Create build directory
        run: |
          mkdir build_output
          cp app.py build_output/
          cp requirements.txt build_output/
          
      - name: 3. (ARTIFACT) Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: build_output

  deploy:
    name: Deploy (staging)
    runs-on: ubuntu-latest
    needs: [build]
    
    if: github.ref == 'refs/heads/main' 
    
    environment:
      name: staging
      url: https://staging.example.com

    steps:
      - name: 1. Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: ./artifact

      - name: 2. Simulate deploy
        env:
          DEPLOY_TOKEN: ${{ secrets.DEPLOY_TOKEN }} 
        run: |
          echo "Deploying to ${{ github.environment }}..."
          echo "Token starts with: ${DEPLOY_TOKEN:0:4}****"
          echo "Artifact contents:"
          ls -la ./artifact
          echo "Deploy success"